<##################################################################################################

    Description
    ===========

    - This script does the following - 
        - 

    - The following logs are generated on the machine - 
        - Chocolatey's log : %ALLUSERSPROFILE%\chocolatey\logs folder.
        - This script's log : $PSScriptRoot\GitEnslister-{TimeStamp}\Logs folder.


    Usage examples
    ==============
    
    - Powershell -executionpolicy bypass -file GitEnlister.ps1 -GitRepoLocation "your repo URI" -PersonalAccessToken "access-token" 

    - Powershell -executionpolicy bypass -file GitEnlister.ps1 -GitRepoLocation "your repo URI" -PersonalAccessToken "access-token" -GitBranch "branch to check out"

    - Powershell -executionpolicy bypass -file GitEnlister.ps1 -GitRepoLocation "your repo URI" -PersonalAccessToken "access-token" -GitLocalRepoLocation "local folder location"


    Prerequisites
    =============

    - Please ensure that this script is run elevated.
    - Please ensure that the powershell execution policy is set to unrestricted or bypass.


    Known issues / Caveats
    ======================
    
    - 


    Coming soon / planned work
    ==========================
    
    - 

##################################################################################################>

#
# Arguments to this script file.
#

#
$GitBranch = $args[0]

#
$ProsUser  = $args[1] 

#
$ProsPassword = $args[2]

#
$DataBaseName = $args[3]

#
$DataBaseServerIP = $args[4]

#
$DataBaseUser = $args[5]

#
$DataBasePassword = $args[6]

#
$JavaDownloadUri = $args[7]

# The location where this script resides. 
# Note: We cannot use $PSScriptRoot or $MyInvocation inside a script block. Hence passing 
# the location explicitly.
$ScriptRoot = $args[9]

##################################################################################################

#
# Powershell Configurations
#

# Note: Because the $ErrorActionPreference is "Stop", this script will stop on first failure.  
$ErrorActionPreference = "stop"

# Ensure that current process can run scripts. 
Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process -Force 

###################################################################################################

#
# Custom Configurations
#

$PPSS_Repo_Folder = "C:\PPSS_deploy"
$environment_setup_location = "C:\"
$environment_setup_path = $environment_setup_location+"environmentsetup\qaEnvironments"
$java_home_path="C:\Java\jdk"

# Location of the log files
$ScriptLogFolder = Join-Path $PPSS_Repo_Folder -ChildPath "Logs"
$ScriptLog = Join-Path -Path $ScriptLogFolder -ChildPath "PPSSInstall.log"
$JavaJDKInstallLog = Join-Path -Path $ScriptLogFolder -ChildPath "JavaJDKInstall.log"
$JavaJDKInstallErr = Join-Path -Path $ScriptLogFolder -ChildPath "JavaJDKInstall.err"
$GitCloneStdOut = Join-Path -Path $ScriptLogFolder -ChildPath "GitClone.log"
$GitCloneStdErr = Join-Path -Path $ScriptLogFolder -ChildPath "GitClone.err"
$EnvSetupStdOut = Join-Path -Path $ScriptLogFolder -ChildPath "EnvironmentSetup.log"
$EnvSetupStdErr = Join-Path -Path $ScriptLogFolder -ChildPath "EnvironmentSetup.err"

##################################################################################################

# 
# Description:
#  - Displays the script argument values (default or user-supplied).
#
# Parameters:
#  - N/A.
#
# Return:
#  - N/A.
#
# Notes:
#  - Please ensure that the Initialize() method has been called at least once before this 
#    method. Else this method can only write to console and not to log files. 
#

function DisplayArgValues
{
    WriteLog "========== Configuration =========="
    WriteLog $("-GitRepoLocation : " + $GitBranch)
    WriteLog $("-GitLocalRepoLocation : " + $ProsUser)
    WriteLog $("-PersonalAccessToken : " + $DataBaseName)
    WriteLog $("-GitRepoLocation : " + $DataBaseServerIP)
    WriteLog $("-GitLocalRepoLocation : " + $DataBaseUser)
    WriteLog $("-PersonalAccessToken : " + $JavaDownloadUri)
    WriteLog "========== Configuration =========="
}

##################################################################################################

# 
# Description:
#  - Creates the folder structure which'll be used for dumping logs generated by this script and
#    the logon task.
#
# Parameters:
#  - N/A.
#
# Return:
#  - N/A.
#
# Notes:
#  - N/A.
#

function InitializeFolders
{
    if ($false -eq (Test-Path -Path $PPSS_Repo_Folder))
    {
        New-Item -Path $PPSS_Repo_Folder -ItemType directory | Out-Null
    }

    if ($false -eq (Test-Path -Path $ScriptLogFolder))
    {
        New-Item -Path $ScriptLogFolder -ItemType directory | Out-Null
    }
}

##################################################################################################

# 
# Description:
#  - Writes specified string to the console as well as to the script log (indicated by $ScriptLog).
#
# Parameters:
#  - $message: The string to write.
#
# Return:
#  - N/A.
#
# Notes:
#  - N/A.
#

function WriteLog
{
    Param(
        <# Can be null or empty #> $message
    )

    $timestampedMessage = $("[" + [System.DateTime]::Now + "] " + $message) | % {
        Out-File -InputObject $_ -FilePath $ScriptLog -Append
    }
}

##################################################################################################

# 
# Description:
#  - Installs Java JDK.
#
# Parameters:
#  - N/A.
#
# Return:
#  - If installation is successful, then nothing is returned.
#  - Else a detailed terminating error is thrown.
#
# Notes:
#  - 
#

function InstallJavaJDK
{
    Param(
        [ValidateNotNullOrEmpty()] $JavaDownloadUri,
        [ValidateNotNullOrEmpty()] $JavaLogs
        [ValidateNotNullOrEmpty()] $JavaErrorLogs
    )
    $installDir=$java_home_path

    WriteLog "Installing Java JDK..."

    # pre-condition checks
    if ($false -eq $JavaDownloadUri.ToLowerInvariant().StartsWith("http://")) 
    {
        $errMsg = $("Error! The specified Java JDK url is not a valid HTTP url")
        WriteLog $errMsg
        Write-Error $errMsg 
    }
    if ($false -eq $gitRepoLocation.Length -gt 8)
    {
        $errMsg = $("Error! The specified Java JDK download url is not valid")
        WriteLog $errMsg
        Write-Error $errMsg
    }

    # Download Java JDK from public Oracl URI
    $installer_name = Split-Path -Path $JavaDownloadUri -Leaf
    $destination = $PPSS_Repo_Folder+"\"+$installer_name
    $client = new-object System.Net.WebClient 
    $cookie = "oraclelicense=accept-securebackup-cookie"
    $client.Headers.Add([System.Net.HttpRequestHeader]::Cookie, $cookie) 
    $client.downloadFile($JavaDownloadUri, $destination)

    $install_process = start-process $destination INSTALLCFG=$ScriptRoot\JavaInstallConfig.txt -PassThru -Wait -RedirectStandardOutput $JavaLogs -RedirectStandardError $JavaErrorLogs

    if ($install_process.ExitCode -ne 0)
    {
        $errMsg = $("Java JDK installation falied " + $install_process.ExitCode + ". Please see the log file: " + $JavaErrorLogs)
        WriteLog $errMsg
        Write-Error $errMsg
    }

    # Set JAVA_HOME environment variable, required for PPSS installation
    [Environment]::SetEnvironmentVariable("JAVA_HOME", $installDir, "Machine")

    WriteLog "Success. Java JDK successfully installed"
}

##################################################################################################

#
# Description:
#  - Clones the specified git repo into specified local folder. 
#
# Parameters:
#  - $gitBranch: The branch that will be checked out.
#  - $stdOutLogfile: The log file to which the operation's stdout will be redirected.
#  - $stdErrLogfile: The log file to which the operation's stderr will be redirected.
#
# Return:
#  - If git clone is successful, then nothing is returned.
#  - Else a detailed terminating error is thrown.
#
# Notes:
#  - N/A.
#

function CloneEnvironmentSetupRepo
{
    Param(
        [ValidateNotNullOrEmpty()] $gitBranch,
        [ValidateNotNullOrEmpty()] $stdOutLogfile,
        [ValidateNotNullOrEmpty()] $stdErrLogfile,
        )

    # Git Repo Server Info
    $server_repo_name = "lux-qs"
    $server_repo_ip = "172.17.102.68"

    # Doman name server conversions(For some reason we have not access to PROS DNS)
    $server_repo_dns = $server_repo_ip+"    "+$server_repo_name
    $pro_maven_dns = "172.16.1.170     pros-maven"
    $artifactory_centos_dns = "172.17.101.76    artifactory-centos"
    
    # Remote server login name
    $remote_server_user = $ProsUser+"@"+$server_repo_name

    # Repository name
    $repo_name = "environmentsetup"

    # Hostfile path, to add the conversion names required
    $hosts_file = "C:\Windows\System32\drivers\etc\hosts"

    # Add server name conversions to hosts list
    "`n" | Add-Content $hosts_file
    $server_repo_dns | Add-Content $hosts_file
    $pro_maven_dns | Add-Content $hosts_file
    $artifactory_centos_dns | Add-Content $hosts_file

    # Get pros_user password as plain text
    $SecurePassword = ConvertTo-SecureString $ProsPassword -AsPlainText -Force
    $BSTR = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($SecurePassword)
    $UnsecurePassword = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($BSTR)

    # Clone the environmentsetup repo in linux repo_server
    $environmentsetup_clone_file=$ScriptRoot+"\clone_latest_environmentsetup.txt"
    # Flag to check if process timedout
    $timeouted = $null

    WriteLog $("Cloning the environment setup repo in remote server and copying it to local...")

    $arguments = $("-agent -ssh "+$remote_server_user+" -pw "+$UnsecurePassword+" -m "+$environmentsetup_clone_file)
    #putty -agent -ssh $ProsUser+"@"+$server_repo_name -pw $UnsecurePassword -m 'C:\Users\pros_user\clone_latest_environmentsetup.txt'
    $clone_process = Start-Process -FilePath "putty.exe" -ArgumentList  $arguments -RedirectStandardOutput $stdOutLogfile -RedirectStandardError $stdErrLogfile -PassThru
    $clone_process | Wait-Process -Timeout 20 -ea 0 -ev timeouted
    if ($timeouted)
    {
        # terminate the process
        $clone_process | kill
        $errMsg = $("Environment setup could not be cloned due timeout " + $clone_process.ExitCode + ". Please see the log file: " + $stdErrLogfile)
        WriteLog $errMsg
        Write-Error $errMsg 

        # update internal error counter
    }
    elseif ($clone_process.ExitCode -ne 0)
    {
        $errMsg = $("Environment setup could not be cloned " + $clone_process.ExitCode + ". Please see the log file: " + $stdErrLogfile)
        WriteLog $errMsg
        Write-Error $errMsg 
    }

    $remote_server_repo = $remote_server_user+":"+$repo_name
    echo y | pscp -r -pw $UnsecurePassword $remote_server_repo $environment_setup_location
    if ($? -eq $false) 
     { 
        $errMsg = $("Error!. Failed to copy repo from remote server.") 
         WriteLog $errMsg 
         Write-Error $errMsg  
     } 
  
    WriteLog $("Success. environmentsetup repo cloned and copied to local: " + $environment_setup_location)
}

##################################################################################################

#
# Description:
#  - Run environmentsetup to install a qa environment
#
# Parameters:
#  - $stdOutLogfile: The log file to which the operation's stdout will be redirected.
#  - $stdErrLogfile: The log file to which the operation's stderr will be redirected.
#
# Return:
#  - If successful, then nothing is returned.
#  - Else a detailed terminating error is thrown.
#
# Notes:
#  - Errors are not loged to files yet, need to fix this in future.
#

function InstallAndStartPPSS
{
    Param(
        [ValidateNotNullOrEmpty()] $stdOutLogfile,
        [ValidateNotNullOrEmpty()] $stdErrLogfile
    )

# PPSS Installation variables
$ppss_install_dir="C:\PROS\PPSS"
$ppss_bin_dir=$ppss_install_dir+"\build\bin"
$tomcat_port=7080
$sysops_port=7292
$ajp_port=7393
$rmi_port=37080
$ppss_server=localhost
#$version=3.38.0
#$ppss_version=3.38.0-SNAPSHOT

# PPSS Scratch Installation tool variables
$qa_environments_dir=$environment_setup_path

# Get DB user password as plain text
$SecurePassword = ConvertTo-SecureString $DataBasePassword -AsPlainText -Force
$BSTR = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($SecurePassword)
$UnsecurePassword = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($BSTR)

# Environment Variables
$db_type="SqlServer"
$db_user=$DataBaseUser
$db_pwd=$UnsecurePassword
$db_name=$DataBaseName
$db_server=$DataBaseServerIP
$enable_solr="true"
$java_home=$java_home_path

# Clean Installation directory
rmdir /q /s $ppss_install_dir
mkdir $ppss_install_dir

# Start installation from scratch
cd $qa_environments_dir
.\gradlew installSimpleQaAllModules dataLoadQaAllModules -PinstallDir=$ppss_install_dir -PdbType=$db_type -PdbUser=$db_user -PdbPword=$db_pwd -PdbName=$db_name -PdbServer=$db_server -PdbPort=1433 -PenableSolr=$enable_solr -PtomcatPort=$tomcat_port -PsysopsPort=$sysops_port -PajpPort=$ajp_port -PrmiRegistryPort=$rmi_port -PjavaHome=$java_home --info
#-Pversion=$version
#-PppssVersion=$ppss_version

if ($? -eq $false) 
    { 
       $errMsg = $("Error!. Failed to install ppss")
        WriteLog $errMsg 
        Write-Error $errMsg  
    } 
  
WriteLog $("Success. PPSS Installed Successfully")

# Add some required configurations
echo pricingcore.businessobjectcache=true  >>  $ppss_install_dir/build/config/prosshell/user/user.properties
echo pricingcore.configuratorcache=true  >>  $ppss_install_dir/build/config/prosshell/user/user.properties
echo sales_optimizer_batch_strategy=Even  >>  $ppss_install_dir/build/config/prosshell/user/user.properties

# Start Application services
cd $ppss_bin_dir
.\prosshell startall	

if ($? -eq $false) 
    { 
       $errMsg = $("Error!. Failed to Start ppss")
        WriteLog $errMsg 
        Write-Error $errMsg
    } 

WriteLog $("Success. PPSS Started Successfully")
}

##################################################################################################

#
# 
#

try
{

    #
    InitializeFolders

    #
    DisplayArgValues
    
    # Install Java JDK
    InstallJavaJDK -JavaDownloadUri $JavaDownloadUri -JavaLogs $JavaJDKInstallLog -JavaErrorLogs $JavaJDKInstallErr

    # Clone environment setup repositorie
    CloneEnvironmentSetupRepo -gitBranch $ -stdOutLogfile $GitCloneStdOut -stdErrLogfile $GitCloneStdErr

    # Install latest PPSS and start services
    InstallAndStartPPSS -stdOutLogfile $EnvSetupStdOut -stdErrLogfile $EnvSetupStdErr

    # all done. Let's return will exit code 0.
    return 0
}

catch
{
    if (($null -ne $Error[0]) -and ($null -ne $Error[0].Exception) -and ($null -ne $Error[0].Exception.Message))
    {
        $errMsg = $Error[0].Exception.Message
        WriteLog $errMsg
        Write-Host $errMsg
    }

    # Important note: Throwing a terminating error (using $ErrorActionPreference = "stop") still returns exit 
    # code zero from the powershell script. The workaround is to use try/catch blocks and return a non-zero 
    # exit code from the catch block. 
    return -1
}